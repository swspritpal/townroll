<?php

use App\Models\Access\User\User;
use App\Models\Country\Country;
Use App\Models\Country\State;
use App\Models\Country\City;
use Carbon\Carbon;

/**
 * Global helpers file with misc functions.
 */
if (! function_exists('app_name')) {
    /**
     * Helper to grab the application name.
     *
     * @return mixed
     */
    function app_name()
    {
        return config('app.name');
    }
}

if (! function_exists('access')) {
    /**
     * Access (lol) the Access:: facade as a simple function.
     */
    function access()
    {
        return app('access');
    }
}

if (! function_exists('history')) {
    /**
     * Access the history facade anywhere.
     */
    function history()
    {
        return app('history');
    }
}

if (! function_exists('gravatar')) {
    /**
     * Access the gravatar helper.
     */
    function gravatar()
    {
        return app('gravatar');
    }
}

if (! function_exists('includeRouteFiles')) {

    /**
     * Loops through a folder and requires all PHP files
     * Searches sub-directories as well.
     *
     * @param $folder
     */
    function includeRouteFiles($folder)
    {
        $directory = $folder;
        $handle = opendir($directory);
        $directory_list = [$directory];

        while (false !== ($filename = readdir($handle))) {
            if ($filename != '.' && $filename != '..' && is_dir($directory.$filename)) {
                array_push($directory_list, $directory.$filename.'/');
            }
        }

        foreach ($directory_list as $directory) {
            foreach (glob($directory.'*.php') as $filename) {
                require $filename;
            }
        }
    }
}

if (! function_exists('getRtlCss')) {

    /**
     * The path being passed is generated by Laravel Mix manifest file
     * The webpack plugin takes the css filenames and appends rtl before the .css extension
     * So we take the original and place that in and send back the path.
     *
     * @param $path
     *
     * @return string
     */
    function getRtlCss($path)
    {
        $path = explode('/', $path);
        $filename = end($path);
        array_pop($path);
        $filename = rtrim($filename, '.css');

        return implode('/', $path).'/'.$filename.'.rtl.css';
    }
}

/**
 * App helpers
 */

if (!function_exists('isAdmin')) {
    function isAdmin($user)
    {
        return $user != null && $user instanceof User && $user->id === 1;
    }
}

if (!function_exists('isAdminById')) {
    function isAdminById($user_id)
    {
        return $user_id === 1;
    }
}

if (!function_exists('getAdminUser')) {
    function getAdminUser()
    {
        return User::findOrFail(1);
    }
}

if (!function_exists('getMilliseconds')) {
    function getMilliseconds()
    {
        return round(microtime(true) * 1000);
    }
}

if (!function_exists('array_safe_get')) {
    function array_safe_get($array, $key, $default = '')
    {
        if (array_has($array, $key)) {
            return $array[$key];
        }
        return $default;
    }
}

if (!function_exists('getUrlEndWithSlash')) {
    function getUrlEndWithSlash($url)
    {
        if (!ends_with($url, '/')) {
            return $url . '/';
        }
        return $url;
    }
}

if (!function_exists('getUrlByFileName')) {
    function getUrlByFileName($fileName)
    {
        /**
         * https domain first
         */
        $qiniu_domain = config('filesystems.disks.qiniu.domains.https');
        if ($qiniu_domain) {
            $qiniu_domain = getUrlEndWithSlash($qiniu_domain);
        } else {
            $qiniu_domain = getUrlEndWithSlash($qiniu_domain = config('filesystems.disks.qiniu.domains.default'));
        }
        return $qiniu_domain . $fileName;
    }
}

if (!function_exists('processImageViewUrl')) {

    function processImageViewUrl($rawImageUrl, $width = null, $height = null, $mode = 1)
    {
        $para = '?imageView2/' . $mode;
        if ($width)
            $para = $para . '/w/' . $width;
        if ($height)
            $para = $para . '/h/' . $height;
        return $rawImageUrl . $para;
    }
}

if (!function_exists('getImageViewUrl')) {
    /**
     * @see http://developer.qiniu.com/code/v6/api/kodo-api/image/imageview2.html
     * @param $key
     * @param null $width
     * @param null $height
     * @param int $mode
     * @return string
     */
    function getImageViewUrl($key, $width = null, $height = null, $mode = 1)
    {
        return processImageViewUrl(getUrlByFileName($key), $width, $height, $mode);
    }
}


if (!function_exists('formatBytes')) {
    function formatBytes($size, $precision = 2)
    {
        if ($size > 0) {
            $size = (int)$size;
            $base = log($size) / log(1024);
            $suffixes = [' bytes', ' KB', ' MB', ' GB', ' TB'];

            return round(pow(1024, $base - floor($base)), $precision) . $suffixes[floor($base)];
        } else {
            return $size;
        }
    }
}

if (!function_exists('getMentionedUsers')) {
    function getMentionedUsers($content)
    {
        preg_match_all("/(\S*)\@([^\r\n\s]*)/i", $content, $atlist_tmp);
        $usernames = [];
        foreach ($atlist_tmp[2] as $k => $v) {
            if ($atlist_tmp[1][$k] || strlen($v) > 25) {
                continue;
            }
            $usernames[] = $v;
        }
        $users = User:: whereIn('username', array_unique($usernames))->get();
        return $users;
    }
}


if (!function_exists('httpUrl')) {
    function httpUrl($url)
    {
        if ($url == null || $url == '')
            return '';
        if (!starts_with($url, 'http'))
            return 'http://' . $url;
        return $url;
    }
}


if (!function_exists('getCountiesList')) {
    function getCountiesList()
    {
        $countries = Country::orderBy('name')->pluck('name', 'sortname')->toArray();
        if(!empty($countries)){
            return $countries;
        }else{
            return "";
        }
    }
}


if (!function_exists('getStateList')) {
    function getStateList($country_id=null)
    {
        $states=State::where('country_id', '=',$country_id)->orderBy('name')->pluck('name', 'id')->toArray();
        if(!empty($states)){
            return $states;
        }else{
            return "";
        }
    }
}

if (!function_exists('getCityList')) {
    function getCityList($state_id=null)
    {
        $cities = City::where('state_id', '=',$state_id)->orderBy('name')->pluck('name', 'id')->toArray();
        if(!empty($cities)){
            return $cities;
        }else{
            return "";
        }
    }
}

if (!function_exists('getCountryId')) {
    function getCountryId($sortnameOfCountry)
    {
        $country = Country::where('sortname','=',$sortnameOfCountry)->select('id')->firstOrFail();
        if(!empty($country)){
            return $country->id;
        }else{
            return "NA";
        }
    }
}


if (!function_exists('is_username_unique')) {
    function is_username_unique($username)
    {
        $username=clean_username($username);                
        $model = User::whereProfileUri($username)->first(['username', 'id']);

        if(empty($model) || is_null($model)){
            return false;
        }else{
            return true;
        }
    }
}


if (!function_exists('clean_username')) {
    function clean_username($string)
    {
        $string=strtolower($string);
        $string = str_replace(' ', '-', $string); // Replaces all spaces with hyphens.
        $string = preg_replace('/[^A-Za-z0-9\-]/', '', $string); // Removes special chars.
        return (string) preg_replace('/-+/', '-', $string); // Replaces multiple hyphens with single one.
    }
}


if (!function_exists('get_city_name')) {
    function get_city_name($city_id)
    {
        if(!empty($city_id)){
            $model = City::whereId($city_id)->first(['name']);
            if(!empty($model)){
                return $model->name;
            }else{
                return 'NA';
            }
        }
    }
}


if (!function_exists('get_latitude')) {
    function get_latitude()
    {
        if(!empty($_COOKIE['latitude'])){
            return $_COOKIE['latitude'];
        }else{
            return '';
        }
    }
}


if (!function_exists('get_longitude')) {
    function get_longitude()
    {
        if(!empty($_COOKIE['longitude'])){
            return $_COOKIE['longitude'];
        }else{
            return '';
        }
    }
}

if (!function_exists('is_user_already_joined_place')) {
    function is_user_already_joined_place($place_id = null)
    {
        return (bool) \App\Category::where('geo_place_id', $place_id)->whereHas(
                'users',function($user_q){
                    $user_q->where('users.id',\Auth::user()->id);
                })
                ->first();
    }
}

if (!function_exists('get_place_users_count')) {
    function get_place_users_count($place_id = null)
    {
        $category=\App\Category::where('geo_place_id', $place_id)->first();

        if(!empty($category)){
            return $category->users->count();
        }else{
            return false;
        }
    }
}



/**
 * Google Map API helpers
 */



/**
 *  Geo Coding
 * @required Params Integer $input
 */
if (!function_exists('geocoding')) {

    function geocoding($input=null,$location=null,$country=null)
    {
        $params=[
            'input' =>get_city_name($input).','.strtolower($country),
            'bounds' =>'LatLngBounds',
            'region' =>'locality',
            'type' =>'geocode',
            ];

        if(!empty($location)){
            $params['location'] =$location;
        }     
        if(!empty($country)){
            $params['components'] ='country:'.$country;
        }

        $response = \GoogleMaps::load('geocoding')
                ->setParam ($params)
                ->get();

        return json_decode($response,true);
    }
}


if (!function_exists('placedetails')) {

    function placedetails($place_id=null)
    {
        $response = \GoogleMaps::load('placedetails')
            ->setParam ([
                'placeid' =>$place_id,
                ])
            ->get();

        return json_decode($response,true);
    }
}

if (!function_exists('placephoto')) {

    function placephoto($photoreference=null,$place_id)
    {
         $google_image_data = \GoogleMaps::load('placephoto')
            ->setParam ([
                'photoreference' =>$photoreference,                
                'maxwidth'=>500,
                ])
            ->get();

        $data = 'data:image/PNG;base64,' . base64_encode($google_image_data);

        // save Raw image data into server

        list($type, $data) = explode(';', $data);
        list(, $data)      = explode(',', $data);
        $data = base64_decode($data);

        $is_saved=file_put_contents(public_path().env('PLACE_IMAGES_FOLDER').$place_id.'.png', $data);

        if (!empty($is_saved))
            return $place_id.'.png';
        else
            return "error";
        
    }
}

if (!function_exists('nearbysearch')) {

    function nearbysearch($location=null,$radius=500)
    {
        $response = \GoogleMaps::load('nearbysearch')
        ->setParam ([
            'location' =>$location,
            'radius' =>$radius,
            ])
        ->get();

        return json_decode($response,true);        
    }
}


if (!function_exists('show_time')) {

    function show_time($value=null,$timeZone=null)
    {
        /*if(!empty($value) && (strpos($value,'T')  !== false)){
            $split_value=explode('T', $value);
            $value=$split_value['0'].' '.$split_value['1'];
        }*/

        $dt = new \DateTime($value);
        $carbon = Carbon::instance($dt);
        $carbon->setTimezone('Asia/Kolkata');
        return $carbon->diffForHumans();    
    }
}

/**
 * Return comment content
 * @params Model with full namespace \App\Comment:$id
 * @return string 
 */

if (!function_exists('show_comment_content_in_notification')) {

    function show_comment_content_in_notification($model=null)
    {
        list($model,$id)=explode(':', $model);
        $comment=app($model)->select('html_content')->whereId($id)->first();
        if(!empty($comment)){
            return trim($comment->html_content);
        }
    }
}


if (!function_exists('is_username_exit')) {

    function is_username_exit($username=null)
    {
        $model = User::where('username', '=',$username)->get(['username', 'id']);
        if(!empty($model)){
            return true;
        }else{
            return false;
        }
        
    }
}

if (!function_exists('is_base64_encoded')) {

    function is_base64_encoded($data)
    {
        if (preg_match('%^[a-zA-Z0-9/+]*={0,2}$%', $data)) {
           return TRUE;
        } else {
           return FALSE;
        }
    }
}

